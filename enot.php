<?php
require 'config.php';
$input = json_decode(file_get_contents('php://input'), true);
    
// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
if (isset($input['message'])) {
    $chat_id = $input['message']['chat']['id'];
    $user_id = $input['message']['from']['id'];
    
// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
    if (isset($input['message']['text'])) {
        $text = $input['message']['text'];
        
        if ($text === '/start') {
            sendMessage($chat_id, "–Ø - Enot –ë–ª–æ–∫–Ω–æ—Ç. –ù–∞–¥–µ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—é —Ç–≤–æ–∏ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –∑–∞—à–∏—Ñ—Ä—É—é –∏—Ö.  \n\n–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç, –∏ —è —Å–æ—Ö—Ä–∞–Ω—é –µ–≥–æ!\n/list ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏.");
        } 
        elseif ($text === '/list') {
            showNotesList($chat_id);
        }
        else {
            saveNote($chat_id, $text);
        }
    }
// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    elseif (isset($input['message']['voice'])) {
        $voice_file_id = $input['message']['voice']['file_id'];
        if (handleVoiceMessage($chat_id, $user_id, $voice_file_id)) {
            sendMessage($chat_id, "üîä –ì–æ–ª–æ—Å–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! \n /list");
        } else {
            sendMessage($chat_id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.");
        }
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
elseif (isset($input['callback_query'])) {
    handleCallback($input['callback_query']);
}

// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–º–µ—Ç–∫—É
function saveNote($chat_id, $text) {
    global $pdo;
    try {
        // –û—Å—Ç–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç, –Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
        $encrypted = encrypt($text);
        $stmt = $pdo->prepare("INSERT INTO notes (chat_id, message) VALUES (:chat_id, :message)");
        $stmt->execute([
            ':chat_id' => $chat_id,
            ':message' => $encrypted
        ]);
        sendMessage($chat_id, "üîê –ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n/list");
    } catch (PDOException $e) {
        logError($e->getMessage());
        sendMessage($chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏");
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫
function showNotesList($chat_id) {
    global $pdo;
    try {
        $stmt = $pdo->prepare("SELECT id, message FROM notes WHERE chat_id = ? ORDER BY id DESC");
        $stmt->execute([$chat_id]);
        $notes = $stmt->fetchAll();

        if (empty($notes)) {
            sendMessage($chat_id, "üì≠ –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç");
            return;
        }

        $message = "üìã *–í–∞—à–∏ –∑–∞–ø–∏—Å–∏:*\n\n";
        $keyboard = [];
        
        foreach ($notes as $note) {
            $decrypted = decrypt($note['message']);
            $short_text = mb_substr($decrypted, 0, 20);
            if (mb_strlen($decrypted) > 20) {
                $short_text .= '...';
            }
            
            // –°–æ–∑–¥–∞–µ–º –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
            $keyboard[] = [
                [
                    'text' => "üìÑ " . $short_text,
                    'callback_data' => "show_{$note['id']}"
                ],
                [
                    'text' => "‚ùå",
                    'callback_data' => "delete_{$note['id']}"
                ]
            ];
        }

        sendMessage($chat_id, $message, $keyboard);
    } catch (PDOException $e) {
        logError($e->getMessage());
        sendMessage($chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–ø–∏—Å–µ–π");
    }
}


// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫
function handleCallback($callback) {
    global $pdo;
    $chat_id = $callback['message']['chat']['id'];
    $data = $callback['data'];
    list($action, $note_id) = explode('_', $data);

    try {
        if ($action === 'show') {
            $stmt = $pdo->prepare("SELECT message FROM notes WHERE id = ? AND chat_id = ?");
            $stmt->execute([$note_id, $chat_id]);
            $note = $stmt->fetch();
            
            if ($note) {
                $decrypted = decrypt($note['message']);
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
                $keyboard = [
                    [
                        ['text' => "üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", 'callback_data' => "backtolist"]
                    ]
                ];
                sendMessage($chat_id, "üìÑ –ó–∞–º–µ—Ç–∫–∞ #$note_id:\n\n$decrypted", $keyboard);
            }
        } 
        elseif ($action === 'delete') {
            $stmt = $pdo->prepare("DELETE FROM notes WHERE id = ? AND chat_id = ?");
            $stmt->execute([$note_id, $chat_id]);
            answerCallback($callback['id'], "üóë –ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞!");
            showNotesList($chat_id); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
        }
        elseif ($action === 'backtolist') {
            // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ª–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –∑–∞–º–µ—Ç–∫–∏
            deleteMessage($chat_id, $callback['message']['message_id']);
            showNotesList($chat_id);
        }
    } catch (PDOException $e) {
        logError($e->getMessage());
        answerCallback($callback['id'], "‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏");
    }
}

function deleteMessage($chat_id, $message_id) {
    $url = "https://api.telegram.org/bot" . BOT_TOKEN . "/deleteMessage";
    file_get_contents($url . '?' . http_build_query([
        'chat_id' => $chat_id,
        'message_id' => $message_id
    ]));
}
/**
 * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
 */
function logError($message) {
    file_put_contents(
        __DIR__ . '/error.log',
        '[' . date('Y-m-d H:i:s') . '] ' . $message . PHP_EOL,
        FILE_APPEND
    );
}
// –û—Ç–≤–µ—Ç –Ω–∞ callback
function answerCallback($callback_id, $text) {
    $url = "https://api.telegram.org/bot" . BOT_TOKEN . "/answerCallbackQuery";
    file_get_contents($url . '?' . http_build_query([
        'callback_query_id' => $callback_id,
        'text' => $text
    ]));
}


/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –∫–∞–∫ —Ñ–∞–π–ª
 */
function sendAsFile($chat_id, $text, $filename = null) {
    if ($filename === null) {
        $filename = "note_" . date('Y-m-d_H-i-s') . ".txt";
    }
    
    file_put_contents($filename, $text);
    
    $url = "https://api.telegram.org/bot" . BOT_TOKEN . "/sendDocument";
    $data = [
        'chat_id' => $chat_id,
        'document' => new CURLFile(realpath($filename))
    ];
    
    $ch = curl_init();
    curl_setopt_array($ch, [
        CURLOPT_URL => $url,
        CURLOPT_POST => true,
        CURLOPT_POSTFIELDS => $data,
        CURLOPT_RETURNTRANSFER => true
    ]);
    
    $response = curl_exec($ch);
    curl_close($ch);
    
    unlink($filename); // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    
    return $response;
}

function prepareText($text, $is_markdown = true) {
    if (!$is_markdown) {
        return htmlspecialchars($text, ENT_QUOTES, 'UTF-8');
    }

    // –°–Ω–∞—á–∞–ª–∞ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML-—Å—É—â–Ω–æ—Å—Ç–∏
    $text = htmlspecialchars($text, ENT_QUOTES, 'UTF-8');
    
    $markdown_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!'];
    
    // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º URL (–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç)
    $text = preg_replace_callback('/(https?:\/\/[^\s]+)/', function($matches) {
        return htmlspecialchars($matches[0], ENT_QUOTES, 'UTF-8');
    }, $text);

    $result = '';
    $length = mb_strlen($text);
    
    for ($i = 0; $i < $length; $i++) {
        $char = mb_substr($text, $i, 1);
        
        if (in_array($char, $markdown_chars)) {
            $char = '\\' . $char;
        }
        
        $result .= $char;
    }
    
    return $result;
}

/**
 * –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
 */
function sendMessage($chat_id, $text, $keyboard = null, $parse_mode = 'MarkdownV2') {
    $text = trim($text);
    if (empty($text)) {
        logError("–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —á–∞—Ç–∞ $chat_id");
        return false;
    }

    // –û—Ç–∫–ª—é—á–∞–µ–º Markdown –¥–ª—è —Å–ª—É–∂–µ–±–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if (strpos($text, 'üÜî') !== false || strpos($text, 'üìã') !== false) {
        $parse_mode = '';
    }

    $data = [
        'chat_id' => $chat_id,
        'text' => $parse_mode === 'MarkdownV2' ? prepareText($text) : $text,
        'parse_mode' => $parse_mode,
        'disable_web_page_preview' => true
    ];

    if ($keyboard) {
        $data['reply_markup'] = json_encode(['inline_keyboard' => $keyboard]);
    }

    $url = "https://api.telegram.org/bot" . BOT_TOKEN . "/sendMessage";
    $ch = curl_init();
    
    curl_setopt_array($ch, [
        CURLOPT_URL => $url,
        CURLOPT_POST => true,
        CURLOPT_POSTFIELDS => $data,
        CURLOPT_RETURNTRANSFER => true,
        CURLOPT_TIMEOUT => 15
    ]);

    $response = curl_exec($ch);
    $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
    
    if ($http_code != 200) {
        $error = json_decode($response, true)['description'] ?? $response;
        logError("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: HTTP $http_code - $error");
        
        // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ plain text –ø—Ä–∏ –æ—à–∏–±–∫–µ
        unset($data['parse_mode']);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
        $response = curl_exec($ch);
    }

    curl_close($ch);
    return $http_code === 200;
}

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
function handleVoiceMessage($chat_id, $user_id, $voice_file_id) {
    global $pdo; // –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–Ω—Å—Ç–∞–Ω—Ç
    if (!defined('YANDEX_FOLDER_ID') || !defined('YANDEX_SPEECHKIT_KEY')) {
        logError("–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∫–ª—é—á–∏ Yandex SpeechKit");
        return false;
    }

    // 1. –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    $voice_file_path = downloadTelegramFile($voice_file_id);
    if (!$voice_file_path) {
        logError("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ");
        return false;
    }
    
    // 2. –†–∞—Å–ø–æ–∑–Ω–∞—ë–º —Ä–µ—á—å
    $text = yandexSpeechToText($voice_file_path);
    if (!$text) {
        logError("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å");
        return false;
    }
    
    // 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É, —á—Ç–æ –∏ –≤ saveNote)
    try {
        $encrypted = encrypt($text);
        $stmt = $pdo->prepare("INSERT INTO notes (chat_id, message) VALUES (?, ?)");
        $stmt->execute([$chat_id, $encrypted]);
        
        return true;
    } catch (PDOException $e) {
        logError("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏: " . $e->getMessage());
        return false;
    }
}

// –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–∑ Telegram
function downloadTelegramFile($file_id) {
    $url = "https://api.telegram.org/bot" . BOT_TOKEN . "/getFile?file_id=" . $file_id;
    $response = json_decode(file_get_contents($url), true);
    
    if ($response['ok']) {
        $file_path = $response['result']['file_path'];
        $temp_file = tempnam(sys_get_temp_dir(), 'voice_');
        $file_content = file_get_contents("https://api.telegram.org/file/bot" . BOT_TOKEN . "/" . $file_path);
        file_put_contents($temp_file, $file_content);
        return $temp_file;
    }
    return false;
}


// –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ —á–µ—Ä–µ–∑ Yandex SpeechKit
function yandexSpeechToText($audio_file) {
    $audio_data = file_get_contents($audio_file);
    $url = "https://stt.api.cloud.yandex.net/speech/v1/stt:recognize?folderId=" . YANDEX_FOLDER_ID;
    $ch = curl_init();
    
    curl_setopt_array($ch, [
        CURLOPT_URL => $url,
        CURLOPT_HTTPHEADER => [
            'Authorization: Api-Key ' . YANDEX_SPEECHKIT_KEY,
            'Content-Type: audio/ogg'
        ],
        CURLOPT_POST => true,
        CURLOPT_POSTFIELDS => $audio_data,
        CURLOPT_RETURNTRANSFER => true,
        CURLOPT_TIMEOUT => 15
    ]);
    
    $response = json_decode(curl_exec($ch), true);
    $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
    curl_close($ch);
    
    // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π ogg-—Ñ–∞–π–ª
    unlink($audio_file);
    
    if ($http_code != 200) {
        logError("–û—à–∏–±–∫–∞ SpeechKit: HTTP $http_code - " . json_encode($response));
        return false;
    }
    
    return $response['result'] ?? false;
    
    file_put_contents('speechkit.log', date('Y-m-d H:i:s') . " - Response: " . print_r($response, true) . "\n", FILE_APPEND);
}
?>