<?php
require 'config.php';

$input = json_decode(file_get_contents('php://input'), true);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
if (isset($input['message'])) {
    $chat_id = $input['message']['chat']['id'];
    $text = $input['message']['text'];

    if ($text === '/start') {
        sendMessage($chat_id, "–Ø - Enot –ë–ª–æ–∫–Ω–æ—Ç. –ù–∞–¥–µ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—é —Ç–≤–æ–∏ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –∑–∞—à–∏—Ñ—Ä—É—é –∏—Ö.  \n\n–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç, –∏ —è —Å–æ—Ö—Ä–∞–Ω—é –µ–≥–æ!\n/list ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏.");
    } 
    elseif ($text === '/list') {
        showNotesList($chat_id);
    }
    else {
        saveNote($chat_id, $text);
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ "–ü–æ–∫–∞–∑–∞—Ç—å"/"–£–¥–∞–ª–∏—Ç—å"
elseif (isset($input['callback_query'])) {
    handleCallback($input['callback_query']);
}

// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–º–µ—Ç–∫—É
function saveNote($chat_id, $text) {
    global $pdo;
    try {
        $encrypted = encrypt($text);
        $stmt = $pdo->prepare("INSERT INTO notes (chat_id, message) VALUES (?, ?)");
        $stmt->execute([$chat_id, $encrypted]);
        sendMessage($chat_id, "üîê –ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n/list");
    } catch (PDOException $e) {
        logError($e->getMessage());
        sendMessage($chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏");
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫
function showNotesList($chat_id) {
    global $pdo;
    try {
        $stmt = $pdo->prepare("SELECT id, message FROM notes WHERE chat_id = ? ORDER BY id DESC");
        $stmt->execute([$chat_id]);
        $notes = $stmt->fetchAll();

        if (empty($notes)) {
            sendMessage($chat_id, "üì≠ –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç");
            return;
        }

        $message = "üìã *–í–∞—à–∏ –∑–∞–ø–∏—Å–∏:*\n\n";
        $keyboard = [];
        foreach ($notes as $note) {
            $decrypted = decrypt($note['message']);
            $short_text = mb_substr($decrypted, 0, 20) . (mb_strlen($decrypted) > 20 ? '...' : '');
            $message .= "üÜî {$note['id']}: {$short_text}\n";
            
            $keyboard[] = [
                [
                    'text' => "üìù –ü–æ–∫–∞–∑–∞—Ç—å",
                    'callback_data' => "show_{$note['id']}"
                ],
                [
                    'text' => "‚ùå –£–¥–∞–ª–∏—Ç—å",
                    'callback_data' => "delete_{$note['id']}"
                ]
            ];
        }

        sendMessage($chat_id, $message, $keyboard);
    } catch (PDOException $e) {
        logError($e->getMessage());
        sendMessage($chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–ø–∏—Å–µ–π");
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫
function handleCallback($callback) {
    global $pdo;
    $chat_id = $callback['message']['chat']['id'];
    $data = $callback['data'];
    list($action, $note_id) = explode('_', $data);

    try {
        if ($action === 'show') {
            $stmt = $pdo->prepare("SELECT message FROM notes WHERE id = ? AND chat_id = ?");
            $stmt->execute([$note_id, $chat_id]);
            $note = $stmt->fetch();
            
            if ($note) {
                $decrypted = decrypt($note['message']);
                sendMessage($chat_id, "üìÑ –ó–∞–º–µ—Ç–∫–∞ #$note_id:\n\n$decrypted");
            }
        } 
        elseif ($action === 'delete') {
            $stmt = $pdo->prepare("DELETE FROM notes WHERE id = ? AND chat_id = ?");
            $stmt->execute([$note_id, $chat_id]);
            answerCallback($callback['id'], "üóë –ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞!");
            showNotesList($chat_id); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
        }
    } catch (PDOException $e) {
        logError($e->getMessage());
        answerCallback($callback['id'], "‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏");
    }
}

/**
 * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
 */
function logError($message) {
    file_put_contents(
        __DIR__ . '/error.log',
        '[' . date('Y-m-d H:i:s') . '] ' . $message . PHP_EOL,
        FILE_APPEND
    );
}
// –û—Ç–≤–µ—Ç –Ω–∞ callback
function answerCallback($callback_id, $text) {
    $url = "https://api.telegram.org/bot" . BOT_TOKEN . "/answerCallbackQuery";
    file_get_contents($url . '?' . http_build_query([
        'callback_query_id' => $callback_id,
        'text' => $text
    ]));
}


/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –∫–∞–∫ —Ñ–∞–π–ª
 */
function sendAsFile($chat_id, $text, $filename = null) {
    if ($filename === null) {
        $filename = "note_" . date('Y-m-d_H-i-s') . ".txt";
    }
    
    file_put_contents($filename, $text);
    
    $url = "https://api.telegram.org/bot" . BOT_TOKEN . "/sendDocument";
    $data = [
        'chat_id' => $chat_id,
        'document' => new CURLFile(realpath($filename))
    ];
    
    $ch = curl_init();
    curl_setopt_array($ch, [
        CURLOPT_URL => $url,
        CURLOPT_POST => true,
        CURLOPT_POSTFIELDS => $data,
        CURLOPT_RETURNTRANSFER => true
    ]);
    
    $response = curl_exec($ch);
    curl_close($ch);
    
    unlink($filename); // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    
    return $response;
}

/**
 * –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è MarkdownV2
 */
function prepareText($text) {
    // –°–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å
    $chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!'];
    
    // –°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º URL, —á—Ç–æ–±—ã –Ω–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∏—Ö —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    $text = preg_replace_callback('/(https?:\/\/[^\s]+)/', function($matches) {
        $url = $matches[0];
        // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ —Å–∫–æ–±–∫–∏ –≤ URL
        $url = str_replace([')'], ['\)'], $url);
        return $url;
    }, $text);

    // –ó–∞—Ç–µ–º —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –≤–Ω–µ URL
    $result = '';
    $inUrl = false;
    $length = mb_strlen($text);
    
    for ($i = 0; $i < $length; $i++) {
        $char = mb_substr($text, $i, 1);
        
        if ($char === '[' || $char === '(') {
            $inUrl = true;
        } elseif ($char === ']' || $char === ')') {
            $inUrl = false;
        }
        
        if (!$inUrl && in_array($char, $chars)) {
            $char = '\\' . $char;
        }
        
        $result .= $char;
    }
    
    return $result;
}

/**
 * –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π Markdown
 */
function sendMessage($chat_id, $text, $keyboard = null, $parse_mode = 'MarkdownV2') {
    $text = trim($text);
    if (empty($text)) {
        logError("–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —á–∞—Ç–∞ $chat_id");
        return false;
    }

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ —Ä–∞–∑–º–µ—Ç–∫–∏
    if ($parse_mode === 'MarkdownV2') {
        $text = prepareText($text);
    }

    $data = [
        'chat_id' => $chat_id,
        'text' => $text,
        'parse_mode' => $parse_mode,
        'disable_web_page_preview' => true
    ];

    if ($keyboard) {
        $data['reply_markup'] = json_encode(['inline_keyboard' => $keyboard]);
    }

    $url = "https://api.telegram.org/bot" . BOT_TOKEN . "/sendMessage";
    $ch = curl_init();
    
    curl_setopt_array($ch, [
        CURLOPT_URL => $url,
        CURLOPT_POST => true,
        CURLOPT_POSTFIELDS => $data,
        CURLOPT_RETURNTRANSFER => true,
        CURLOPT_TIMEOUT => 15
    ]);

    $response = curl_exec($ch);
    $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
    
    if ($http_code != 200) {
        $error = json_decode($response, true)['description'] ?? $response;
        logError("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: HTTP $http_code - $error\n–¢–µ–∫—Å—Ç: ".substr($text, 0, 1000));
        
        // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ plain text –ø—Ä–∏ –æ—à–∏–±–∫–µ
        if ($parse_mode !== '') {
            unset($data['parse_mode']);
            curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
            $response = curl_exec($ch);
        }
    }

    curl_close($ch);
    return $http_code === 200;
}
?>